<?php

namespace App\Controller\Admin;

use App\Entity\Blog;
use App\Entity\Subscribers;
use App\Message\NewsletterEmail;
use App\Repository\SubscribersRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Provider\AdminContextProvider;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Messenger\MessageBusInterface;


class BlogCrudController extends AbstractCrudController
{
    private $adminUrlGenerator;

    public function __construct(AdminUrlGenerator $adminUrlGenerator)
    {
        $this->adminUrlGenerator = $adminUrlGenerator;
    }

    public static function getEntityFqcn(): string
    {
        return Blog::class;
    }

    public function createEntity(string $entityFqcn)
    {
        $blog = new Blog();
        $blog->setAuthor($this->getUser());

        return $blog;
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $entityInstance->setUpdatedAt(new \DateTime());
        $entityManager->persist($entityInstance);
        $entityManager->flush();
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        if ($this->isGranted("ROLE_ADMIN")) {
                return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
        }
        return  $this
                    ->getDoctrine()
                    ->getManager()
                    ->getRepository(Blog::class)
                    ->findSelfBlogs($this->getUser());
    }

    public function configureFields(string $pageName): iterable
    {


        return [
            TextField::new('title'),
            TextEditorField::new('content'),
            ImageField::new('image')
                ->setRequired($pageName !== "edit")
                ->setUploadDir("public/image/blog/")
                ->setBasePath("/image/blog/")
                ->setUploadedFileNamePattern('[randomhash].[extension]')
                ->setCssClass("image"),
            BooleanField::new('status'),
            AssociationField::new('author')->hideOnForm(),
            DateTimeField::new('created_at')->hideOnForm(),
            DateTimeField::new('updated_at')->hideOnForm(),
            AssociationField::new('categories')->onlyOnForms(),
            ArrayField::new('categories')->hideOnForm(),
            AssociationField::new('tags')->onlyOnForms(),
            ArrayField::new('tags')->hideOnForm(),
            AssociationField::new('comments')->onlyOnIndex(),
            ArrayField::new('comments')->onlyOnDetail()
        ];
    }

    public function configureActions(Actions $actions): Actions
    {
        $sendNewsletter = Action::new("sendNewsletter", "Send Newsletter")
                            ->linkToCrudAction("sendNewsletter")
                            ->displayIf(function (Blog $blog){
                                return $blog->getShared() == 0;
                            });

        return $actions
            ->add(Crud::PAGE_INDEX, Action::DETAIL)
            ->add(Crud::PAGE_INDEX, $sendNewsletter);
    }

    /**
     * @return Response
     * @throws \Throwable
     */
    public function sendNewsletter(): Response
    {
        $adminContext = $this->get(AdminContextProvider::class);
        $em = $this->getDoctrine()->getManager();
        $blog = $adminContext->getContext()->getEntity()->getInstance();

        $subscribers = $this->getDoctrine()->getManager()->getRepository(Subscribers::class)->findAll();
        foreach ($subscribers as $subscriber) {
            $messageBus = $this->get("message_bus");
            $messageBus->dispatch(new NewsletterEmail($blog->getId(), $subscriber->getEmail()));

            $blog->setShared(1);

            $em->persist($blog);
            $em->flush();

        }

        $blogIndexUrl = $this->adminUrlGenerator->setAction("index")->generateUrl();
        return $this->redirect($blogIndexUrl);
    }

    public static function getSubscribedServices()
    {
        $services =  parent::getSubscribedServices();
        $services['message_bus'] = MessageBusInterface::class;
        return $services;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
                ->setSearchFields(["title", "content"]);
    }


}
